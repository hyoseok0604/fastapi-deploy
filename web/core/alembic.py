from typing import Sequence, TypeGuard

from alembic.autogenerate import produce_migrations
from alembic.migration import MigrationContext
from alembic.operations import Operations
from alembic.operations.ops import MigrateOperation, OpContainer
from sqlalchemy.orm import Session

from web.core.database import async_session
from web.models.base import BaseModel


def is_op_container(op: MigrateOperation) -> TypeGuard[OpContainer]:
    return issubclass(type(op), OpContainer)


def _run_operations_recursive(
    ops: Operations, migrate_operations: Sequence[MigrateOperation]
):
    for op in migrate_operations:
        if is_op_container(op):
            _run_operations_recursive(ops, op.ops)
        else:
            ops.invoke(op)


def migration(session: Session):
    conn = session.connection()

    def nothing(rev, context):
        return []

    migration_context = MigrationContext.configure(conn, opts={"fn": nothing})
    migration_script = produce_migrations(
        context=migration_context, metadata=BaseModel.metadata
    )
    upgrade_ops = migration_script.upgrade_ops

    if upgrade_ops is None:
        return

    ops = Operations(migration_context=migration_context)

    _run_operations_recursive(ops, upgrade_ops.ops)


async def async_autogenerated_migration():
    async with async_session() as session:
        await session.run_sync(migration)
        await session.commit()
